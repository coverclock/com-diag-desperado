/* vim: set ts=4 expandtab shiftwidth=4: */

/******************************************************************************

    Copyright 2006-2011 Digital Aggregates Corporation, Colorado, USA.
    This file is part of the Digital Aggregates Desperado library.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    $Name:  $

    $Id: toolficlsh.cpp,v 1.5 2006/09/13 16:46:50 jsloan Exp $

******************************************************************************/


/**
 *  @file
 *
 *  Implements the toolficlshell command line tool. Catches SIGINT (signal
 *  2), typically generated by typing ^C on the keyboard, and restarts the
 *  Ficl shell. This allows a shell to be restarted. This signaling handling
 *  is placed in this main rather in the ficlsh() function because many
 *  embedded systems do not implement signal handling, but Linux-like
 *  systems that actually have a traditional shell capable of running this
 *  main are more likely to do so. Note that aborting a Ficl shell may leave
 *  it in a problematic state depending on what it was doing at the time
 *  (e.g., maybe it leaves the dictionary in a corrupted state). I think
 *  it also leaves the C++ objects allocated on the stack in a funny state
 *  since I doubt that their destructors are not called. I tried some
 *  experiments with trying to clean up the C++ stack by throwing an
 *  exception, but once you do the longjmp(), the old state of the stack
 *  is gone from the point of view of the C++ exception handler. Exceptions
 *  are a bad idea from the same point of view that signals are a bad idea.
 *
 *  @see    FiclShell
 *
 *  @author $Author: jsloan $
 *
 *  @version    $Revision: 1.5 $
 *
 *  @date   $Date: 2006/09/13 16:46:50 $
 */

#include "com/diag/desperado/stdlib.h"
extern "C" {
#   include <signal.h>
#   include <setjmp.h>
}
#include "com/diag/desperado/ficlsh.h"
#include "com/diag/desperado/errno.h"
#include "com/diag/desperado/Platform.h"
#include "com/diag/desperado/Print.h"
#include "com/diag/desperado/Desperado.h"


static sigjmp_buf context;
static volatile sig_atomic_t interruptable;


static void interrupted(int /* signalnumber */) {
    if (interruptable) {
        interruptable = 0;
        siglongjmp(context, 1);
    }
}

/*
 * Not all operating systems that are POSIX compliant or compilers that are
 * otherwise ANSI C compliant define the type sighandler_t like GCC under Linux
 * does. So we'll just define it ourselves.
 */
typedef void (*signalhandler)(int);

int main(int, char **, char **) {
    Platform& platform = Platform::instance();
    Print errorf(platform.error());
    int rc = 0;

    interruptable = 0;

    signalhandler handler = ::signal(SIGINT, interrupted);
    if (SIG_ERR == handler) {
        errorf("%s[%d]: signal(SIGINT) failed (%d)!\n",
            __FILE__, __LINE__, errno);
    }

    rc = sigsetjmp(context, 1);
    if (rc) {
        errorf("\nrestarting!\n");
    }
    interruptable = 1;

#if defined(DESPERADO_HAS_FICL)
    std::exit(ficlsh());
#else
    std::exit(0);
#endif
}
